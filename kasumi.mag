
// CONSTANTS

S7 := [54, 50, 62, 56, 22, 34, 94, 96, 38,  6, 63, 93,  2, 18,123, 33,
   55,113, 39,114, 21, 67, 65, 12, 47, 73, 46, 27, 25,111,124, 81,
   53,  9,121, 79, 52, 60, 58, 48,101,127, 40,120,104, 70, 71, 43,
   20,122, 72, 61, 23,109, 13,100, 77,  1, 16,  7, 82, 10,105, 98,
  117,116, 76, 11, 89,106,  0,125,118, 99, 86, 69, 30, 57,126, 87,
  112, 51, 17,  5, 95, 14, 90, 84, 91,  8, 35,103, 32, 97, 28, 66,
  102, 31, 26, 45, 75,  4, 85, 92, 37, 74, 80, 49, 68, 29,115, 44,
   64,107,108, 24,110, 83, 36, 78, 42, 19, 15, 41, 88,119, 59,  3];

S9 := [167,239,161,379,391,334,  9,338, 38,226, 48,358,452,385, 90,397,
  183,253,147,331,415,340, 51,362,306,500,262, 82,216,159,356,177,
  175,241,489, 37,206, 17,  0,333, 44,254,378, 58,143,220, 81,400,
   95,  3,315,245, 54,235,218,405,472,264,172,494,371,290,399, 76,
  165,197,395,121,257,480,423,212,240, 28,462,176,406,507,288,223,
  501,407,249,265, 89,186,221,428,164, 74,440,196,458,421,350,163,
  232,158,134,354, 13,250,491,142,191, 69,193,425,152,227,366,135,
  344,300,276,242,437,320,113,278, 11,243, 87,317, 36, 93,496, 27,
  
  487,446,482, 41, 68,156,457,131,326,403,339, 20, 39,115,442,124,
  475,384,508, 53,112,170,479,151,126,169, 73,268,279,321,168,364,
  363,292, 46,499,393,327,324, 24,456,267,157,460,488,426,309,229,
  439,506,208,271,349,401,434,236, 16,209,359, 52, 56,120,199,277,
  465,416,252,287,246,  6, 83,305,420,345,153,502, 65, 61,244,282,
  173,222,418, 67,386,368,261,101,476,291,195,430, 49, 79,166,330,
  280,383,373,128,382,408,155,495,367,388,274,107,459,417, 62,454,
  132,225,203,316,234, 14,301, 91,503,286,424,211,347,307,140,374,
  
   35,103,125,427, 19,214,453,146,498,314,444,230,256,329,198,285,
   50,116, 78,410, 10,205,510,171,231, 45,139,467, 29, 86,505, 32,
   72, 26,342,150,313,490,431,238,411,325,149,473, 40,119,174,355,
  185,233,389, 71,448,273,372, 55,110,178,322, 12,469,392,369,190,
    1,109,375,137,181, 88, 75,308,260,484, 98,272,370,275,412,111,
  336,318,  4,504,492,259,304, 77,337,435, 21,357,303,332,483, 18,
   47, 85, 25,497,474,289,100,269,296,478,270,106, 31,104,433, 84,
  414,486,394, 96, 99,154,511,148,413,361,409,255,162,215,302,201,
  
  266,351,343,144,441,365,108,298,251, 34,182,509,138,210,335,133,
  311,352,328,141,396,346,123,319,450,281,429,228,443,481, 92,404,
  485,422,248,297, 23,213,130,466, 22,217,283, 70,294,360,419,127,
  312,377,  7,468,194,  2,117,295,463,258,224,447,247,187, 80,398,
  284,353,105,390,299,471,470,184, 57,200,348, 63,204,188, 33,451,
   97, 30,310,219, 94,160,129,493, 64,179,263,102,189,207,114,402,
  438,477,387,122,192, 42,381,  5,145,118,180,449,293,323,136,380,
   43, 66, 60,455,341,445,202,432,  8,237, 15,376,436,464, 59,461];

C := [0x0123, 0x4567, 0x89AB, 0xCDEF, 0xFEDC, 0xBA98, 0x7654, 0x3210];

function XOR(x,y)
	return [(EuclideanNorm(x[i]-y[i])) : i in [1..#x]];
//return [((x[i]+y[i])mod 2) :i in [1..#x]];
end function;

function AND(x,y)
	return [(x[i]*y[i]) : i in [1..#x]];
end function;

function OR(x,y)
	tmp:=[];
  	for i in [1..#x] do
    	if ((x[i] eq 1) or (y[i] eq 1)) then
      		tmp[i]:=1;
    	else 
    		tmp[i]:=0;
    	end if;
  	end for;
	
	return tmp;
end function;

// I and KL 32 bit
FL := function(I, KL)
    KL1 := KL[1..16];
    KL2 := KL[17..32];
  
    L := I[1..16];
    R := I[17..32];

    Rnew := XOR(R, Rotate(AND(L, KL1), -1));
    Lnew := XOR(L, Rotate(OR(Rnew, KL2), -1)); 

    return Lnew cat Rnew;   
end function;

// x 7-bits
ZE := function(x)
    return [0,0] cat x;
end function;

// x 9-bits
TR := function(x)
    return x[3..9];
end function;


PadSeq := function(n, len)
    return [0 : i in [1..len - #n]] cat n;
end function;

// I 16-bit, KI 16-bit subkey
FI := function(I, KI)
    L0 := I[1..9];
    R0 := I[10..16];

    KI1 := KI[1..7];
    KI2 := KI[8..16];

    L1 := R0;
    R1 := XOR(PadSeq(Reverse(Intseq(S9[Seqint(Reverse(L0), 2)], 2)), 9), ZE(R0));
    #R1;
    L2 := XOR(R1, KI2);
    R2 := XOR(XOR(PadSeq(Reverse(Intseq(S7[Seqint(Reverse(L1), 2)], 2)), 7), TR(R1)), KI1);

    L3 := R2;
    R3 := XOR(PadSeq(Reverse(Intseq(S9[Seqint(Reverse(L2), 2)], 2)), 9), ZE(R2));

    L4 := XOR(PadSeq(Reverse(Intseq(S7[Seqint(Reverse(L3), 2)], 2)), 7), TR(R3));
    R4 := R3;

    return L4 cat R4;
end function;

function XOR(x,y)
	return [(EuclideanNorm(x[i]-y[i])) : i in [1..#x]];
end function;

function FO (I, KO, KI)

	L := I[1..16];
	R := I[17..32];

	KOi := [];

	KOi := Append(KOi, KO[1..16]);
	KOi := Append(KOi, KO[17..32]);
	KOi := Append(KOi, KO[33..48]);

	KIi := [];

	KIi := Append(KIi, KI[1..16]);
	KIi := Append(KIi, KI[17..32]);
	KIi := Append(KIi, KI[33..48]);

	for j in [1..3] do
		PrevR := R;
		PrevL := L;

		R := XOR(FI( XOR(PrevL, KOi[j]), KIi[j]), PrevR);
		L := PrevR;
	end for;

	return L cat R;

end function;

//DA SCRIVERE IL KEY SCHEDULE
// Key of 128-bit
KeySchedule := function(K, round)
    // K1 := K[1..16];
    // K2 := K[17..32];
    // K3 := K[33..48];
    // K4 := K[49..64];
    // K5 := K[65..80];
    // K6 := K[81..96];
    // K7 := K[97..112];
    // K8 := K[113..128];

    Key := [K[1..16], K[17..32], K[33..48], K[49..64], K[65..80], K[81..96], K[97..112], K[113..128]];

    Kj := [];
    for j in [1..8] do
        Kj[j] := Append(Kj, XOR(Key[j], C[j]));
    end for;
    KL := [];
    KO := [];
    KI := [];
    Kj6Shift := Rotate(Kj, 6);
    Kj4Shift := Rotate(Kj, 4);
    Kj5Shift := Rotate(Kj, 5);
    Kj1Shift := Rotate(Kj, 1);

    Key7Shift := Rotate(Key, 7);
    Key3Shift := Rotate(Key, 3);
    Key2Shift := Rotate(Key, 2);

    KL := Append(KL, Rotate(Key[round], -1));
    KL := Append(KL, Kj6Shift[round]);

    KO := Append(KO, Rotate(Key7Shift[round], -5));
    KO := Append(KO, Rotate(Key3Shift[round], -8));
    KO := Append(KO, Rotate(Key2Shift[round], -13));

    KI := Append(KI, Kj4Shift[round]);
    KI := Append(KI, Kj5Shift[round]);
    KI := Append(KI, Kj1Shift[round]);

    return KL, KO, KI;
end function;

//I 32-bit, RK round key, r round -> O 32-bit
function f(I, RK, r)
  KL, KO, KI := KeySchedule(RK, r);

  //odd round
  if ((r mod 2) eq 1) then
    return FO(FL(I,KL),KO,KI);
  //even round
  else
    return FL(FO(I,KO,KI),KL);
  end if;
end function;

Kasumi := function(P, K)
    Pbinary := Intseq(P, 2);
    Pbinary := PadSeq(Pbinary, 64);

    Kbinary := Intseq(K, 2);
    Kbinary := PadSeq(Kbinary, 128);

    L := Pbinary[1..32];
    R := Pbinary[33..64];
    round1Ris := XOR(f(L, Kbinary, 1), R);
    
    round2Ris := XOR(f(round1Ris, Kbinary, 2), L);

    round3Ris := XOR(f(round2Ris, Kbinary, 3), round1Ris);

    round4Ris := XOR(f(round3Ris, Kbinary, 4), round2Ris);

    round5Ris := XOR(f(round4Ris, Kbinary, 5), round3Ris);
    
    round6Ris := XOR(f(round5Ris, Kbinary, 6), round4Ris);
    
    round7Ris := XOR(f(round6Ris, Kbinary, 7), round5Ris);

    round8Ris := XOR(f(round7Ris, Kbinary, 8), round6Ris);

    return round8Ris cat round7Ris;
end function;